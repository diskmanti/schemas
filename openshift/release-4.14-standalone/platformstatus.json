{
  "description": "PlatformStatus holds the current status specific to the underlying infrastructure provider of the current cluster. Since these are used at status-level for the underlying cluster, it is supposed that only one of the status structs is set.",
  "type": "object",
  "required": [
    "type"
  ],
  "properties": {
    "alibabaCloud": {
      "description": "AlibabaCloudPlatformStatus holds the current status of the Alibaba Cloud infrastructure provider.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "region"
      ],
      "properties": {
        "region": {
          "description": "region specifies the region for Alibaba Cloud resources created for the cluster.",
          "type": "string",
          "default": ""
        },
        "resourceGroupID": {
          "description": "resourceGroupID is the ID of the resource group for the cluster.",
          "type": [
            "string",
            "null"
          ]
        },
        "resourceTags": {
          "description": "resourceTags is a list of additional tags to apply to Alibaba Cloud resources created for the cluster.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "AlibabaCloudResourceTag is the set of tags to add to apply to resources.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "key",
              "value"
            ],
            "properties": {
              "key": {
                "description": "key is the key of the tag.",
                "type": "string",
                "default": ""
              },
              "value": {
                "description": "value is the value of the tag.",
                "type": "string",
                "default": ""
              }
            }
          },
          "x-kubernetes-list-map-keys": [
            "key"
          ],
          "x-kubernetes-list-type": "map"
        }
      }
    },
    "aws": {
      "description": "AWSPlatformStatus holds the current status of the Amazon Web Services infrastructure provider.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "region"
      ],
      "properties": {
        "region": {
          "description": "region holds the default AWS region for new AWS resources created by the cluster.",
          "type": "string",
          "default": ""
        },
        "resourceTags": {
          "description": "resourceTags is a list of additional tags to apply to AWS resources created for the cluster. See https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html for information on tagging AWS resources. AWS supports a maximum of 50 tags per resource. OpenShift reserves 25 tags for its use, leaving 25 tags available for the user.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "AWSResourceTag is a tag to apply to AWS resources created for the cluster.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "key",
              "value"
            ],
            "properties": {
              "key": {
                "description": "key is the key of the tag",
                "type": "string",
                "default": ""
              },
              "value": {
                "description": "value is the value of the tag. Some AWS service do not support empty values. Since tags are added to resources in many services, the length of the tag value must meet the requirements of all services.",
                "type": "string",
                "default": ""
              }
            }
          }
        },
        "serviceEndpoints": {
          "description": "ServiceEndpoints list contains custom endpoints which will override default service endpoint of AWS Services. There must be only one ServiceEndpoint for a service.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "AWSServiceEndpoint store the configuration of a custom url to override existing defaults of AWS Services.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "name",
              "url"
            ],
            "properties": {
              "name": {
                "description": "name is the name of the AWS service. The list of all the service names can be found at https://docs.aws.amazon.com/general/latest/gr/aws-service-information.html This must be provided and cannot be empty.",
                "type": "string",
                "default": ""
              },
              "url": {
                "description": "url is fully qualified URI with scheme https, that overrides the default generated endpoint for a client. This must be provided and cannot be empty.",
                "type": "string",
                "default": ""
              }
            }
          }
        }
      }
    },
    "azure": {
      "description": "AzurePlatformStatus holds the current status of the Azure infrastructure provider.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "resourceGroupName"
      ],
      "properties": {
        "armEndpoint": {
          "description": "armEndpoint specifies a URL to use for resource management in non-soverign clouds such as Azure Stack.",
          "type": [
            "string",
            "null"
          ]
        },
        "cloudName": {
          "description": "cloudName is the name of the Azure cloud environment which can be used to configure the Azure SDK with the appropriate Azure API endpoints. If empty, the value is equal to `AzurePublicCloud`.",
          "type": [
            "string",
            "null"
          ]
        },
        "networkResourceGroupName": {
          "description": "networkResourceGroupName is the Resource Group for network resources like the Virtual Network and Subnets used by the cluster. If empty, the value is same as ResourceGroupName.",
          "type": [
            "string",
            "null"
          ]
        },
        "resourceGroupName": {
          "description": "resourceGroupName is the Resource Group for new Azure resources created for the cluster.",
          "type": "string",
          "default": ""
        },
        "resourceTags": {
          "description": "resourceTags is a list of additional tags to apply to Azure resources created for the cluster. See https://docs.microsoft.com/en-us/rest/api/resources/tags for information on tagging Azure resources. Due to limitations on Automation, Content Delivery Network, DNS Azure resources, a maximum of 15 tags may be applied. OpenShift reserves 5 tags for internal use, allowing 10 tags for user configuration.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "AzureResourceTag is a tag to apply to Azure resources created for the cluster.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "key",
              "value"
            ],
            "properties": {
              "key": {
                "description": "key is the key part of the tag. A tag key can have a maximum of 128 characters and cannot be empty. Key must begin with a letter, end with a letter, number or underscore, and must contain only alphanumeric characters and the following special characters `_ . -`.",
                "type": "string",
                "default": ""
              },
              "value": {
                "description": "value is the value part of the tag. A tag value can have a maximum of 256 characters and cannot be empty. Value must contain only alphanumeric characters and the following special characters `_ + , - . / : ; < = > ? @`.",
                "type": "string",
                "default": ""
              }
            }
          }
        }
      }
    },
    "baremetal": {
      "description": "BareMetalPlatformStatus holds the current status of the BareMetal infrastructure provider. For more information about the network architecture used with the BareMetal platform type, see: https://github.com/openshift/installer/blob/master/docs/design/baremetal/networking-infrastructure.md",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "apiServerInternalIPs",
        "ingressIPs"
      ],
      "properties": {
        "apiServerInternalIP": {
          "description": "apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers.\n\nDeprecated: Use APIServerInternalIPs instead.",
          "type": [
            "string",
            "null"
          ]
        },
        "apiServerInternalIPs": {
          "description": "apiServerInternalIPs are the IP addresses to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. These are the IPs for a self-hosted load balancer in front of the API servers. In dual stack clusters this list contains two IPs otherwise only one.",
          "type": "array",
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "ingressIP": {
          "description": "ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names.\n\nDeprecated: Use IngressIPs instead.",
          "type": [
            "string",
            "null"
          ]
        },
        "ingressIPs": {
          "description": "ingressIPs are the external IPs which route to the default ingress controller. The IPs are suitable targets of a wildcard DNS record used to resolve default route host names. In dual stack clusters this list contains two IPs otherwise only one.",
          "type": "array",
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "loadBalancer": {
          "description": "BareMetalPlatformLoadBalancer defines the load balancer used by the cluster on BareMetal platform.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "type": {
              "description": "type defines the type of load balancer used by the cluster on BareMetal platform which can be a user-managed or openshift-managed load balancer that is to be used for the OpenShift API and Ingress endpoints. When set to OpenShiftManagedDefault the static pods in charge of API and Ingress traffic load-balancing defined in the machine config operator will be deployed. When set to UserManaged these static pods will not be deployed and it is expected that the load balancer is configured out of band by the deployer. When omitted, this means no opinion and the platform is left to choose a reasonable default. The default value is OpenShiftManagedDefault.",
              "type": [
                "string",
                "null"
              ],
              "default": "OpenShiftManagedDefault"
            }
          },
          "x-kubernetes-unions": [
            {
              "discriminator": "type",
              "fields-to-discriminateBy": {}
            }
          ]
        },
        "nodeDNSIP": {
          "description": "nodeDNSIP is the IP address for the internal DNS used by the nodes. Unlike the one managed by the DNS operator, `NodeDNSIP` provides name resolution for the nodes themselves. There is no DNS-as-a-service for BareMetal deployments. In order to minimize necessary changes to the datacenter DNS, a DNS service is hosted as a static pod to serve those hostnames to the nodes in the cluster.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "equinixMetal": {
      "description": "EquinixMetalPlatformStatus holds the current status of the Equinix Metal infrastructure provider.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "apiServerInternalIP": {
          "description": "apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers.",
          "type": [
            "string",
            "null"
          ]
        },
        "ingressIP": {
          "description": "ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "external": {
      "description": "ExternalPlatformStatus holds the current status of the generic External infrastructure provider.",
      "type": [
        "object",
        "null"
      ]
    },
    "gcp": {
      "description": "GCPPlatformStatus holds the current status of the Google Cloud Platform infrastructure provider.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "projectID",
        "region"
      ],
      "properties": {
        "projectID": {
          "description": "resourceGroupName is the Project ID for new GCP resources created for the cluster.",
          "type": "string",
          "default": ""
        },
        "region": {
          "description": "region holds the region for new GCP resources created for the cluster.",
          "type": "string",
          "default": ""
        }
      }
    },
    "ibmcloud": {
      "description": "IBMCloudPlatformStatus holds the current status of the IBMCloud infrastructure provider.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "cisInstanceCRN": {
          "description": "CISInstanceCRN is the CRN of the Cloud Internet Services instance managing the DNS zone for the cluster's base domain",
          "type": [
            "string",
            "null"
          ]
        },
        "dnsInstanceCRN": {
          "description": "DNSInstanceCRN is the CRN of the DNS Services instance managing the DNS zone for the cluster's base domain",
          "type": [
            "string",
            "null"
          ]
        },
        "location": {
          "description": "Location is where the cluster has been deployed",
          "type": [
            "string",
            "null"
          ]
        },
        "providerType": {
          "description": "ProviderType indicates the type of cluster that was created",
          "type": [
            "string",
            "null"
          ]
        },
        "resourceGroupName": {
          "description": "ResourceGroupName is the Resource Group for new IBMCloud resources created for the cluster.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "kubevirt": {
      "description": "KubevirtPlatformStatus holds the current status of the kubevirt infrastructure provider.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "apiServerInternalIP": {
          "description": "apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers.",
          "type": [
            "string",
            "null"
          ]
        },
        "ingressIP": {
          "description": "ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "nutanix": {
      "description": "NutanixPlatformStatus holds the current status of the Nutanix infrastructure provider.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "apiServerInternalIPs",
        "ingressIPs"
      ],
      "properties": {
        "apiServerInternalIP": {
          "description": "apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers.\n\nDeprecated: Use APIServerInternalIPs instead.",
          "type": [
            "string",
            "null"
          ]
        },
        "apiServerInternalIPs": {
          "description": "apiServerInternalIPs are the IP addresses to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. These are the IPs for a self-hosted load balancer in front of the API servers. In dual stack clusters this list contains two IPs otherwise only one.",
          "type": "array",
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "ingressIP": {
          "description": "ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names.\n\nDeprecated: Use IngressIPs instead.",
          "type": [
            "string",
            "null"
          ]
        },
        "ingressIPs": {
          "description": "ingressIPs are the external IPs which route to the default ingress controller. The IPs are suitable targets of a wildcard DNS record used to resolve default route host names. In dual stack clusters this list contains two IPs otherwise only one.",
          "type": "array",
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "loadBalancer": {
          "description": "NutanixPlatformLoadBalancer defines the load balancer used by the cluster on Nutanix platform.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "type": {
              "description": "type defines the type of load balancer used by the cluster on Nutanix platform which can be a user-managed or openshift-managed load balancer that is to be used for the OpenShift API and Ingress endpoints. When set to OpenShiftManagedDefault the static pods in charge of API and Ingress traffic load-balancing defined in the machine config operator will be deployed. When set to UserManaged these static pods will not be deployed and it is expected that the load balancer is configured out of band by the deployer. When omitted, this means no opinion and the platform is left to choose a reasonable default. The default value is OpenShiftManagedDefault.",
              "type": [
                "string",
                "null"
              ],
              "default": "OpenShiftManagedDefault"
            }
          },
          "x-kubernetes-unions": [
            {
              "discriminator": "type",
              "fields-to-discriminateBy": {}
            }
          ]
        }
      }
    },
    "openstack": {
      "description": "OpenStackPlatformStatus holds the current status of the OpenStack infrastructure provider.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "apiServerInternalIPs",
        "ingressIPs"
      ],
      "properties": {
        "apiServerInternalIP": {
          "description": "apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers.\n\nDeprecated: Use APIServerInternalIPs instead.",
          "type": [
            "string",
            "null"
          ]
        },
        "apiServerInternalIPs": {
          "description": "apiServerInternalIPs are the IP addresses to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. These are the IPs for a self-hosted load balancer in front of the API servers. In dual stack clusters this list contains two IPs otherwise only one.",
          "type": "array",
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "cloudName": {
          "description": "cloudName is the name of the desired OpenStack cloud in the client configuration file (`clouds.yaml`).",
          "type": [
            "string",
            "null"
          ]
        },
        "ingressIP": {
          "description": "ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names.\n\nDeprecated: Use IngressIPs instead.",
          "type": [
            "string",
            "null"
          ]
        },
        "ingressIPs": {
          "description": "ingressIPs are the external IPs which route to the default ingress controller. The IPs are suitable targets of a wildcard DNS record used to resolve default route host names. In dual stack clusters this list contains two IPs otherwise only one.",
          "type": "array",
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "loadBalancer": {
          "description": "OpenStackPlatformLoadBalancer defines the load balancer used by the cluster on OpenStack platform.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "type": {
              "description": "type defines the type of load balancer used by the cluster on OpenStack platform which can be a user-managed or openshift-managed load balancer that is to be used for the OpenShift API and Ingress endpoints. When set to OpenShiftManagedDefault the static pods in charge of API and Ingress traffic load-balancing defined in the machine config operator will be deployed. When set to UserManaged these static pods will not be deployed and it is expected that the load balancer is configured out of band by the deployer. When omitted, this means no opinion and the platform is left to choose a reasonable default. The default value is OpenShiftManagedDefault.",
              "type": [
                "string",
                "null"
              ],
              "default": "OpenShiftManagedDefault"
            }
          },
          "x-kubernetes-unions": [
            {
              "discriminator": "type",
              "fields-to-discriminateBy": {}
            }
          ]
        },
        "nodeDNSIP": {
          "description": "nodeDNSIP is the IP address for the internal DNS used by the nodes. Unlike the one managed by the DNS operator, `NodeDNSIP` provides name resolution for the nodes themselves. There is no DNS-as-a-service for OpenStack deployments. In order to minimize necessary changes to the datacenter DNS, a DNS service is hosted as a static pod to serve those hostnames to the nodes in the cluster.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "ovirt": {
      "description": "OvirtPlatformStatus holds the current status of the  oVirt infrastructure provider.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "apiServerInternalIPs",
        "ingressIPs"
      ],
      "properties": {
        "apiServerInternalIP": {
          "description": "apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers.\n\nDeprecated: Use APIServerInternalIPs instead.",
          "type": [
            "string",
            "null"
          ]
        },
        "apiServerInternalIPs": {
          "description": "apiServerInternalIPs are the IP addresses to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. These are the IPs for a self-hosted load balancer in front of the API servers. In dual stack clusters this list contains two IPs otherwise only one.",
          "type": "array",
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "ingressIP": {
          "description": "ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names.\n\nDeprecated: Use IngressIPs instead.",
          "type": [
            "string",
            "null"
          ]
        },
        "ingressIPs": {
          "description": "ingressIPs are the external IPs which route to the default ingress controller. The IPs are suitable targets of a wildcard DNS record used to resolve default route host names. In dual stack clusters this list contains two IPs otherwise only one.",
          "type": "array",
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "loadBalancer": {
          "description": "OvirtPlatformLoadBalancer defines the load balancer used by the cluster on Ovirt platform.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "type": {
              "description": "type defines the type of load balancer used by the cluster on Ovirt platform which can be a user-managed or openshift-managed load balancer that is to be used for the OpenShift API and Ingress endpoints. When set to OpenShiftManagedDefault the static pods in charge of API and Ingress traffic load-balancing defined in the machine config operator will be deployed. When set to UserManaged these static pods will not be deployed and it is expected that the load balancer is configured out of band by the deployer. When omitted, this means no opinion and the platform is left to choose a reasonable default. The default value is OpenShiftManagedDefault.",
              "type": [
                "string",
                "null"
              ],
              "default": "OpenShiftManagedDefault"
            }
          },
          "x-kubernetes-unions": [
            {
              "discriminator": "type",
              "fields-to-discriminateBy": {}
            }
          ]
        },
        "nodeDNSIP": {
          "description": "deprecated: as of 4.6, this field is no longer set or honored.  It will be removed in a future release.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "powervs": {
      "description": "PowerVSPlatformStatus holds the current status of the IBM Power Systems Virtual Servers infrastrucutre provider.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "region",
        "zone"
      ],
      "properties": {
        "cisInstanceCRN": {
          "description": "CISInstanceCRN is the CRN of the Cloud Internet Services instance managing the DNS zone for the cluster's base domain",
          "type": [
            "string",
            "null"
          ]
        },
        "dnsInstanceCRN": {
          "description": "DNSInstanceCRN is the CRN of the DNS Services instance managing the DNS zone for the cluster's base domain",
          "type": [
            "string",
            "null"
          ]
        },
        "region": {
          "description": "region holds the default Power VS region for new Power VS resources created by the cluster.",
          "type": "string",
          "default": ""
        },
        "resourceGroup": {
          "description": "resourceGroup is the resource group name for new IBMCloud resources created for a cluster. The resource group specified here will be used by cluster-image-registry-operator to set up a COS Instance in IBMCloud for the cluster registry. More about resource groups can be found here: https://cloud.ibm.com/docs/account?topic=account-rgs. When omitted, the image registry operator won't be able to configure storage, which results in the image registry cluster operator not being in an available state.",
          "type": [
            "string",
            "null"
          ],
          "default": ""
        },
        "serviceEndpoints": {
          "description": "serviceEndpoints is a list of custom endpoints which will override the default service endpoints of a Power VS service.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "PowervsServiceEndpoint stores the configuration of a custom url to override existing defaults of PowerVS Services.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "name",
              "url"
            ],
            "properties": {
              "name": {
                "description": "name is the name of the Power VS service. Few of the services are IAM - https://cloud.ibm.com/apidocs/iam-identity-token-api ResourceController - https://cloud.ibm.com/apidocs/resource-controller/resource-controller Power Cloud - https://cloud.ibm.com/apidocs/power-cloud",
                "type": "string",
                "default": ""
              },
              "url": {
                "description": "url is fully qualified URI with scheme https, that overrides the default generated endpoint for a client. This must be provided and cannot be empty.",
                "type": "string",
                "default": ""
              }
            }
          }
        },
        "zone": {
          "description": "zone holds the default zone for the new Power VS resources created by the cluster. Note: Currently only single-zone OCP clusters are supported",
          "type": "string",
          "default": ""
        }
      }
    },
    "type": {
      "description": "type is the underlying infrastructure provider for the cluster. This value controls whether infrastructure automation such as service load balancers, dynamic volume provisioning, machine creation and deletion, and other integrations are enabled. If None, no infrastructure automation is enabled. Allowed values are \"AWS\", \"Azure\", \"BareMetal\", \"GCP\", \"Libvirt\", \"OpenStack\", \"VSphere\", \"oVirt\", \"EquinixMetal\", \"PowerVS\", \"AlibabaCloud\", \"Nutanix\" and \"None\". Individual components may not support all platforms, and must handle unrecognized platforms as None if they do not support that platform.\n\nThis value will be synced with to the `status.platform` and `status.platformStatus.type`. Currently this value cannot be changed once set.",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "vsphere": {
      "description": "VSpherePlatformStatus holds the current status of the vSphere infrastructure provider.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "apiServerInternalIPs",
        "ingressIPs"
      ],
      "properties": {
        "apiServerInternalIP": {
          "description": "apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers.\n\nDeprecated: Use APIServerInternalIPs instead.",
          "type": [
            "string",
            "null"
          ]
        },
        "apiServerInternalIPs": {
          "description": "apiServerInternalIPs are the IP addresses to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. These are the IPs for a self-hosted load balancer in front of the API servers. In dual stack clusters this list contains two IPs otherwise only one.",
          "type": "array",
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "ingressIP": {
          "description": "ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names.\n\nDeprecated: Use IngressIPs instead.",
          "type": [
            "string",
            "null"
          ]
        },
        "ingressIPs": {
          "description": "ingressIPs are the external IPs which route to the default ingress controller. The IPs are suitable targets of a wildcard DNS record used to resolve default route host names. In dual stack clusters this list contains two IPs otherwise only one.",
          "type": "array",
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "loadBalancer": {
          "description": "VSpherePlatformLoadBalancer defines the load balancer used by the cluster on VSphere platform.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "type": {
              "description": "type defines the type of load balancer used by the cluster on VSphere platform which can be a user-managed or openshift-managed load balancer that is to be used for the OpenShift API and Ingress endpoints. When set to OpenShiftManagedDefault the static pods in charge of API and Ingress traffic load-balancing defined in the machine config operator will be deployed. When set to UserManaged these static pods will not be deployed and it is expected that the load balancer is configured out of band by the deployer. When omitted, this means no opinion and the platform is left to choose a reasonable default. The default value is OpenShiftManagedDefault.",
              "type": [
                "string",
                "null"
              ],
              "default": "OpenShiftManagedDefault"
            }
          },
          "x-kubernetes-unions": [
            {
              "discriminator": "type",
              "fields-to-discriminateBy": {}
            }
          ]
        },
        "nodeDNSIP": {
          "description": "nodeDNSIP is the IP address for the internal DNS used by the nodes. Unlike the one managed by the DNS operator, `NodeDNSIP` provides name resolution for the nodes themselves. There is no DNS-as-a-service for vSphere deployments. In order to minimize necessary changes to the datacenter DNS, a DNS service is hosted as a static pod to serve those hostnames to the nodes in the cluster.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    }
  },
  "$schema": "http://json-schema.org/schema#"
}